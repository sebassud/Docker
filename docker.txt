When building a .NET Core solution, we can be sure that after running dotnet restore, the result of running dotnet restore again will only change if the .csproj file has changed (e.g. a new package is added or a version is changed).

By copying the .csproj files into the image separately, we can take advantage of Docker's build cache, which means that so long as the .csproj file hasn't changed, the dotnet restore step will not be re-executed unnecessarily each and every time the image gets rebuilt.

docker.ignore
ng serve --prod

https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel/when-to-use-a-reverse-proxy?view=aspnetcore-5.0
Simplify load balancing and secure communication (HTTPS) configuration. Only the reverse proxy server requires an X.509 certificate, and that server can communicate with the app's servers on the internal network using plain HTTP

backend
docker build . -f Api/Dockerfile -t docker.api:api
docker build -f "D:\projekt\Docker\backend\Api\Api\Dockerfile" --force-rm -t api:dev --target base  --label "com.microsoft.created-by=visual-studio" --label "com.microsoft.visual-studio.project-name=Api" "D:\projekt\Docker\backend\Api"

docker images
docker run -d --name docker-api -e "ASPNETCORE_App__Welcome=Elo mordo" -e "ASPNETCORE_URLS=http://+:80" -p 44332:80 docker.api:api
docker run -d --name docker-api -e "ASPNETCORE_App__Welcome=Elo mordo" -e "ASPNETCORE_URLS=http://+:80" docker.api:api
docker run -dt -v "C:\Users\Raptor\vsdbg\vs2017u5:/remote_debugger:rw" -v "D:\projekt\Docker\backend\Api\Api:/app" -v "D:\projekt\Docker\backend\Api:/src/" -v "C:\Users\Raptor\AppData\Roaming\Microsoft\UserSecrets:/root/.microsoft/usersecrets:ro" -v "C:\Users\Raptor\AppData\Roaming\ASP.NET\Https:/root/.aspnet/https:ro" -v "C:\Users\Raptor\.nuget\packages\:/root/.nuget/fallbackpackages2" -v "C:\Program Files\dotnet\sdk\NuGetFallbackFolder:/root/.nuget/fallbackpackages" -e "DOTNET_USE_POLLING_FILE_WATCHER=1" -e "ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS=true" -e "ASPNETCORE_ENVIRONMENT=Development" -e "ASPNETCORE_URLS=https://+:443;http://+:80" -e "NUGET_PACKAGES=/root/.nuget/fallbackpackages2" -e "NUGET_FALLBACK_PACKAGES=/root/.nuget/fallbackpackages;/root/.nuget/fallbackpackages2" -P --name Api --entrypoint tail api:dev -f /dev/null 
af6a6b9101ec6fe8370ec22e6e57417451cd89b95c894fe392ae22eca23add77
docker ps


frontend
docker build . -t docker.web:web
docker run -d --name docker-web --add-host docker-api:172.17.0.2 -p 80:80 docker.web:web 
docker run -d --name docker-web --link docker-api:docker-api -p 80:80 docker.web:web 

docker network ls
docker network inspect bridge
apt-get update && apt-get install -y iputils-ping
cat /etc/hosts

https://blog.tonysneed.com/2019/10/13/enable-ssl-with-asp-net-core-using-nginx-and-docker/
https://dotnetthoughts.net/how-to-nginx-reverse-proxy-with-docker-compose/
https://wkrzywiec.medium.com/build-and-run-angular-application-in-a-docker-container-b65dbbc50be8

https://www.nginx.com/resources/wiki/start/topics/examples/full/
COPY nginx.conf /etc/nginx/nginx.conf --- gdy przekazujemy całą kofigurację
COPY nginx.conf /etc/nginx/conf.d/default.conf --- gdy przekazujemy tylko server


docker compose build
docker compose up -d
docker-compose up -d --build
docker network inspect docker-network
docker-compose scale docker-api=3
docker image prune -a

openssl s_client -connect localhost:443
openssl pkcs12 -in keystore_name.p12 -nodes -nocerts -out private.key